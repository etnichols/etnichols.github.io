{"version":3,"sources":["webpack:///./src/components/postlist.js","webpack:///./src/components/layout.js","webpack:///./src/pages/programming.js","webpack:///./src/utils/format.js"],"names":["PostList","posts","withType","style","marginLeft","listStyle","map","post","node","fields","frontmatter","className","key","slug","to","title","formatDate","date","Layout","children","query","render","data","site","siteMetadata","css","display","fontSize","color","styles","colors","text","textAlign","Date","getFullYear","RenderPage","allMarkdownRemark","edges","PageQuery","Projects","exports","toISOString","split"],"mappings":"6FAAA,2DAoCeA,IAnBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,EAAUC,SAAV,OACf,wBAAIC,MAAO,CAAEC,WAAY,EAAGC,UAAU,SACnCJ,EAAMK,KAAI,SAAAC,GAAS,IACVC,EAASD,EAATC,KACAC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,YAChB,OACE,wBAAIC,UAAU,qCAAqCC,IAAKH,EAAOI,MAC7D,yBAAKF,UAAU,mBACb,kBAAC,OAAD,CAAMA,UAAU,YAAYG,GAAIL,EAAOI,MACpCH,EAAYK,OAEf,yBAAKJ,UAAU,aAAf,IAA6BK,qBAAWN,EAAYO,MAApD,a,+2KC4BGC,IA9CA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,cAAD,CACEC,MAAK,YASLC,OAAQ,SAAAC,GAAS,IACPP,EAAUO,EAAKC,KAAKC,aAApBT,MACR,OACE,oCACE,yBAAKJ,UAAU,aACb,8BACE,kBAAC,IAAD,CAAMG,GAAG,IAAIW,IAAK,CAAEC,QAAQ,iBAC1B,wBAAIf,UAAU,cAAcI,IAE9B,6BACA,kBAAC,IAAD,MACCI,GAEH,gCACE,yBACEhB,MAAO,CACLwB,SAAU,OACVC,MAAOC,IAAOC,OAAOC,KACrBC,UAAU,WAJd,MAOQ,IAAIC,MAAOC,cAPnB,IAOoCnB,OA/BhD,W,kHCEIoB,EAAY,SAAC,GAAY,IACvBlC,EADsB,EAAVqB,KACCc,kBAAkBC,MACrC,OACE,6BACE,2CACA,kBAAC,IAAD,CAAUpC,MAAOA,EAAOC,UAAU,MAKlCoC,EAAS,YA6BAC,UA9CE,kBACf,kBAAC,cAAD,CACAnB,MAAOkB,EACPjB,OAAQ,SAAAC,GAAI,OAAK,kBAAC,IAAD,KAAQ,kBAACa,EAAD,CAAYb,KAAMA,MAF3C,W,iCCJFkB,EAAQxB,WAFW,SAAAC,GAAI,OAAI,IAAIgB,KAAKhB,GAAMwB,cAAcC,MAAM,KAAK,K","file":"component---src-pages-programming-js-883a349f990cd945e2b8.js","sourcesContent":["import './postlist.scss'\n\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport { formatDate } from '../utils/format'\n\nconst resolveColor = type => {\n  switch (type) {\n    case 'project':\n      return 'blue'\n    case 'tutorial':\n      return 'green'\n    default:\n      return 'red'\n  }\n}\n\nconst PostList = ({ posts, withType }) => (\n  <ul style={{ marginLeft: 0, listStyle: `none` }}>\n    {posts.map(post => {\n      const { node } = post\n      const { fields, frontmatter } = node\n      return (\n        <li className=\"post-list-item margin-bottom-large\" key={fields.slug}>\n          <div className=\"title-container\">\n            <Link className=\"list-item\" to={fields.slug}>\n              {frontmatter.title}\n            </Link>\n            <div className=\"post-date\">({formatDate(frontmatter.date)})</div>\n          </div>\n        </li>\n      )\n    })}\n  </ul>\n)\n\nexport default PostList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Link from 'gatsby-link'\n\nimport Nav from '../components/nav'\n\nimport './layout.scss'\nimport styles from '../styles'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => {\n      const { title } = data.site.siteMetadata\n      return (\n        <>\n          <div className=\"container\">\n            <main>\n              <Link to=\"/\" css={{ display: `inline-block` }}>\n                <h1 className=\"site-title\">{title}</h1>\n              </Link>\n              <hr />\n              <Nav />\n              {children}\n            </main>\n            <footer>\n              <div\n                style={{\n                  fontSize: '18px',\n                  color: styles.colors.text,\n                  textAlign: `center`,\n                }}\n              >\n                {`Â© ${new Date().getFullYear()} ${title}`}\n              </div>\n            </footer>\n          </div>\n        </>\n      )\n    }}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Layout from \"../components/layout\"\nimport PostList from '../components/postlist'\n\nconst Projects = () => (\n  <StaticQuery\n  query={PageQuery}\n  render={data => (<Layout><RenderPage data={data}/></Layout>)}\n  />\n)\n\nconst RenderPage =({data}) => {\n  const posts = data.allMarkdownRemark.edges\n  return (\n    <div>\n      <h2>programming</h2>\n      <PostList posts={posts} withType={true} />\n    </div>\n  )\n}\n\nconst PageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          draft: { ne: true }\n          type: { in: [\"project\", \"tutorial\"] }\n        }\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            type\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Projects\n","/** Formats string in form YYYY-MM-DD. */\nconst formatDate = date => new Date(date).toISOString().split('T')[0]\n\nexports.formatDate = formatDate\n"],"sourceRoot":""}